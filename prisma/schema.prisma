generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum License {
  cc_by
  cc_by_sa
  cc0
  custom
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  accounts  Account[]
  sessions  Session[]
  profile   Profile?
}

model Profile {
  id          String     @id @default(cuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @unique
  handle      String     @unique
  displayName String
  bio         String?
  links       Json?
  createdAt   DateTime   @default(now())
  tracks      Track[]
  collections Collection[]
  likes       Like[]
}

model Track {
  id          String         @id @default(cuid())
  profile     Profile        @relation(fields: [profileId], references: [id])
  profileId   String
  title       String
  description String
  durationSec Int
  bpm         Int?
  key         String?
  tags        Unsupported("tsvector")?
  license     License
  audioUrl    String
  coverUrl    String?
  waveform    Json?
  plays       BigInt        @default(0)
  likes       Int           @default(0)
  createdAt   DateTime      @default(now())
  tagJoins    TrackTag[]
  collections CollectionItem[]
  likedBy     Like[]

  @@unique([profileId, title])
}

model Tag {
  id    String      @id @default(cuid())
  name  String      @unique
  tracks TrackTag[]
}

model TrackTag {
  track   Track @relation(fields: [trackId], references: [id])
  trackId String
  tag     Tag   @relation(fields: [tagId], references: [id])
  tagId   String

  @@id([trackId, tagId])
}

model Collection {
  id        String          @id @default(cuid())
  profile   Profile         @relation(fields: [profileId], references: [id])
  profileId String
  name      String
  createdAt DateTime        @default(now())
  items     CollectionItem[]
}

model CollectionItem {
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  track        Track      @relation(fields: [trackId], references: [id])
  trackId      String
  order        Int

  @@id([collectionId, trackId])
}

model Like {
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String
  track     Track   @relation(fields: [trackId], references: [id])
  trackId   String
  createdAt DateTime @default(now())

  @@id([profileId, trackId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
